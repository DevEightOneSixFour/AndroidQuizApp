[
  {
    "id": 1,
    "question": "Which of these is not a way to do multithreading in Kotlin?",
    "correctAnswer": "Only coroutines can do be used for this",
    "incorrectAnswers": [
      "Lambda Expressions",
      "Extend the Thread class",
      "Implement the Runnable interface"
    ]
  },
  {
    "id": 2,
    "question": "What is a Thread?",
    "correctAnswer": "A single sequential flow of control within a program",
    "incorrectAnswers": [
      "A string of messages that make up a conversation",
      "The execution of a program",
      "The class that creates our coroutines"
    ]
  },
  {
    "id": 3,
    "question": "In Android, what is the main thread?",
    "correctAnswer": "The thread responsible for handling UI events",
    "incorrectAnswers": [
      "The thread that is currently running",
      "The thread that runs the main branch repository in git",
      "The thread meant to run our MainActivity"
    ]
  },
  {
    "id": 4,
    "question": "What is the main thread also known as?",
    "correctAnswer": "UI Thread",
    "incorrectAnswers": [
      "Activity Thread",
      "The main thread only has one name",
      "Android Thread"
    ]
  },
  {
    "id": 5,
    "question": "What is untrue of a background thread?",
    "correctAnswer": "A thread that should directly handle UI updates",
    "incorrectAnswers": [
      "A thread that does not manage the execution environment",
      "A thread normally used to run longer operations",
      "A thread that can run parallel with the main thread"
    ]
  },
  {
    "id": 6,
    "question": "What is untrue of coroutines?",
    "correctAnswer": "They cannot be cancelled once started",
    "incorrectAnswers": [
      "They are an instance of suspendable computation",
      "They take up very little memory when used",
      "They are useful for longer running tasks like network calls and database queries"
    ]
  },
  {
    "id": 7,
    "question": "What are the scopes of a coroutine?",
    "correctAnswer": "GlobalScope, LifeCycleScope, ViewModelScope",
    "incorrectAnswers": [
      "Main, IO, Default, Unconfined",
      "StandardScope, TaskScope, InstanceScope, TopScope",
      "ClassScope, MethodScope, BlockScope"
    ]
  },
  {
    "id": 8,
    "question": "What is the scope of GlobalScope?",
    "correctAnswer": "The coroutine can live as long as the application is alive",
    "incorrectAnswers": [
      "The coroutine can live as long as the activity is alive",
      "The coroutine can live as long as the viewmodel is alive",
      "This scope does not exist"
    ]
  },
  {
    "id": 9,
    "question": "What is the scope of LifeCycleScope?",
    "correctAnswer": "The coroutine can live as long as the activity is alive",
    "incorrectAnswers": [
      "The coroutine can live as long as the application is alive",
      "The coroutine can live as long as the viewmodel is alive",
      "This scope does not exist"
    ]
  },
  {
    "id": 10,
    "question": "What is the scope of ViewModelScope?",
    "correctAnswer": "The coroutine can live as long as the viewmodel is alive",
    "incorrectAnswers": [
      "The coroutine can live as long as the application is alive",
      "The coroutine can live as long as the activity is alive",
      "This scope does not exist"
    ]
  },
  {
    "id": 11,
    "question": "What are Dispatchers in coroutines?",
    "correctAnswer": "They which thread to use and are responsible for resuming suspended coroutines",
    "incorrectAnswers": [
      "They connect to coroutine to a workable thread",
      "They do not have to be used with coroutines, but doing so changes its scope",
      "They are used to extend certain Kotlin related functions"
    ]
  },
  {
    "id": 12,
    "question": "What are the types of Dispatchers in coroutines?",
    "correctAnswer": "Main, IO, Default, Unconfined",
    "incorrectAnswers": [
      "Global, LifeCycle, ViewModel",
      "Return, When, Task, Ready",
      "Module, Component, Inject"
    ]
  },
  {
    "id": 13,
    "question": "When would you use Dispatchers.Main",
    "correctAnswer": "To interact with UI elements",
    "incorrectAnswers": [
      "To perform data operations like network, database queries, and file handling",
      "To run CPU-intensive operations",
      "To start a coroutine from another dispatcher"
    ]
  },
  {
    "id": 14,
    "question": "When would you use Dispatchers.IO",
    "correctAnswer": "To perform data operations like network, database queries, and file handling",
    "incorrectAnswers": [
      "To interact with UI elements",
      "To run CPU-intensive operations",
      "To start a coroutine from another dispatcher"
    ]
  },
  {
    "id": 15,
    "question": "When would you use Dispatchers.Default",
    "correctAnswer": "To run CPU-intensive operations",
    "incorrectAnswers": [
      "To interact with UI elements",
      "To perform data operations like network, database queries, and file handling",
      "To start a coroutine from another dispatcher"
    ]
  },
  {
    "id": 16,
    "question": "When would you use Dispatchers.Johnson",
    "correctAnswer": "To start a coroutine from another dispatcher",
    "incorrectAnswers": [
      "To interact with UI elements",
      "To perform data operations like network, database queries, and file handling",
      "To run CPU-intensive operations"
    ]
  }
]